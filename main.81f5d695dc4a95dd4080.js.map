{"version":3,"sources":["webpack:///./js/task_1.js","webpack:///./js/task_2.js","webpack:///./js/task_3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","reject","updatedUsers","map","user","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAACC,GAChBC,YAAW,WACVD,EAAQF,KACTA,OAIFI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCZXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIb,SAAQ,SAACC,EAAQa,GACxBZ,YAAW,WACP,IAAMa,EAAeH,EAASI,KAAI,SAAAC,GAAI,OACpCA,EAAKR,OAASI,EAAd,iBAA8BI,EAA9B,CAAoCP,QAASO,EAAKP,SAAWO,KAE/DhB,EAAQc,KACV,SAMJZ,EAAS,SAAAY,GAAY,OAAIV,QAAQa,MAAMH,IAW7CJ,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GC/BnC,IAIMgB,EAAkB,SAACC,GACrB,OAAO,IAAIpB,SAAQ,SAACC,EAASa,GAEzB,IAP2BO,EAAKC,EAO1BxB,GAPqBuB,EAOa,IAPRC,EAOa,IAN5CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAO9CnB,YAAW,WACUqB,KAAKE,SAAW,GAG/BxB,EAAQ,CAACmB,EAAYM,GAAI5B,IAE3BgB,EAAOM,EAAYM,MAE7B5B,OAII6B,EAAa,SAAC,GAAe,IAAdD,EAAc,KAAVtB,EAAU,KACjCC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,OAGIwB,EAAW,SAAAF,GACfrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAWFP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAC/BvB,KAAKoB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,K","file":"main.81f5d695dc4a95dd4080.js","sourcesContent":["const delay = ms => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n         resolve(ms)\r\n     }, ms)\r\n })\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve,reject) => {\r\n        setTimeout(() => {\r\n            const updatedUsers = allUsers.map(user =>\r\n              user.name === userName ? { ...user, active: !user.active } : user,\r\n            );\r\n            resolve(updatedUsers)\r\n        },1000)\r\n    })\r\n\r\n \r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n    return new Promise((resolve, reject) => {\r\n        \r\n        const delay = randomIntegerFromInterval(200, 500);\r\n        setTimeout(() => {\r\n          const canProcess = Math.random() > 0.3;\r\n      \r\n          if (canProcess) {\r\n              resolve([transaction.id, delay] );\r\n          } else {\r\n            reject(transaction.id);\r\n          }\r\n},delay)\r\n  } );\r\n};\r\n\r\nconst logSuccess = ([id, time]) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}